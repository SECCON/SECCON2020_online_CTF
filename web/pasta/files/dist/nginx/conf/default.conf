server {
  listen 80;
  server_name _;

  proxy_http_version 1.1;
  proxy_set_header host $host;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Host $host;
  proxy_set_header X-Forwarded-Server $host;
  proxy_set_header X-Original-Path $request_uri;
  proxy_set_header X-Real-IP $remote_addr;

  # expose app with proxy
  location / {
    auth_request /proxy/validate;

    auth_request_set $x_auth_uid $upstream_http_x_auth_uid;
    proxy_set_header x-auth-uid $x_auth_uid;

    auth_request_set $x_auth_issuer $upstream_http_x_auth_issuer;
    proxy_set_header x-auth-issuer $x_auth_issuer;

    auth_request_set $x_auth_role $upstream_http_x_auth_role;
    proxy_set_header x-auth-role $x_auth_role;

    proxy_pass http://service-a/;
  }

  # redirect to proxy if 401 (unauthorized)
  error_page 401 = @error401;
  location @error401 {
    return 301 $scheme://$http_host/proxy/login;
  }

  # prepare internal endpoint to validate request
  location = /proxy/validate {
    internal;
    proxy_pass http://auth/validate;
  }

  # expose public endpoints of proxy
  location = /proxy/login {
    proxy_pass http://auth/login;
  }

  location = /proxy/logout {
    proxy_pass http://auth/logout;
  }

  location = /proxy/external {
    proxy_pass http://auth/external;
  }
}
